install.packages('phantonjs')
install.packages('phantomjs')
install.packages('PhantomJS')
pdf_location <- "/Users/Alice/Documents/Masters/threats_texts_map/pdfs"
references_file <- '/Users/Alice/Documents/Masters/Masters_analysis/masters_analysis/journals_w_abstract.ris'
importPDFs <- function(pdf_location){
# get original working directory
original_wd <- getwd()
# list file names
setwd(pdf_location)
files <- list.files(pattern = "pdf$")
# pdfs must have been saved with the paper title in their file title
paper_text <- lapply(files, pdftools::pdf_text)
names(paper_text) <- files
setwd(original_wd)
return(paper_text)
}
# import the references
references <- revtools::read_bibliography(references_file)
references$paper_id <- paste0('p', c(1:length(references$label)))
# import the pdfs
paper_texts <- importPDFs(pdf_location)
x = references$title
y = names(paper_texts)
# create a matrix with the Standard Levenshtein distance between the two vectors
dist.name<-adist(x,y, partial = TRUE, ignore.case = TRUE)
# find pairs with minimum distance
min.name<-apply(dist.name, 1, min)
min.name
match.x.y<-NULL
View(dist.name)
i <- 1
y.i<-match(min.name[i],dist.name[i,])
min.name[i]
dist.name[i,]
# find pairs with minimum distance
min.name<-apply(dist.name, 1, ~ which(min(.)))
# find pairs with minimum distance
min.name<-apply(dist.name, 1, function(x) which(min(x)))
# find pairs with minimum distance
min.name<-apply(dist.name, 1, function(x) which.min)
min.name
# find pairs with minimum distance
min.name<-apply(dist.name, 1, which.min)
min.name
# find pairs with minimum distance
match.x.y <- tibble(x = 1:length(min.name),
y = apply(dist.name, 1, which.min))
# find pairs with minimum distance
match.x.y <- tidyr::tibble(x = 1:length(min.name),
y = apply(dist.name, 1, which.min))
match.x.y
# find pairs with minimum distance
match.x.y <- tidyr::tibble(x.i = 1:length(min.name),
x.name = x[x.i],
y.i = apply(dist.name, 1, which.min),
y.name = y[y.i])
View(match.x.y)
# find pairs with minimum distance
match.x.y <- tidyr::tibble(x.i = 1:nrow(dist.name),
x.name = x[x.i],
y.i = apply(dist.name, 1, which.min),
y.name = y[y.i],
distance = apply(dist.name, 1, min))
View(match.x.y)
# create a matrix with the Standard Levenshtein distance between the two vectors
dist.name <- adist(tm::removePunctuation(x),
tm::removePunctuation(y),
partial = TRUE,
ignore.case = TRUE)
# find pairs with minimum distance
match.x.y <- tidyr::tibble(x.i = 1:nrow(dist.name),
x.name = x[x.i],
y.i = apply(dist.name, 1, which.min),
y.name = y[y.i],
distance = apply(dist.name, 1, min))
View(match.x.y)
adist(x[11], y[89], partial = T, ignore.case = T)
adist(x[11], y[89], partial = F, ignore.case = T)
adist(x[11], y[89], partial = T, ignore.case = T, counts = T)
# find pairs with minimum distance
match.x.y <- tidyr::tibble(x.i = 1:nrow(dist.name),
x.name = x[x.i],
y.i = apply(dist.name, 1, which.min),
y.name = y[y.i],
distance = apply(dist.name, 1, min))
View(match.x.y)
adist(x[14], y[89], partial = T, ignore.case = T, counts = T)
# create a matrix with the Standard Levenshtein distance between the two vectors
dist.name <- adist(tm::removePunctuation(x),
tm::removePunctuation(y),
partial = TRUE,
ignore.case = TRUE,
costs = c(1, 0.5, 1))
# find pairs with minimum distance
match.x.y <- tidyr::tibble(x.i = 1:nrow(dist.name),
x.name = x[x.i],
y.i = apply(dist.name, 1, which.min),
y.name = y[y.i],
distance = apply(dist.name, 1, min))
View(match.x.y)
remove(match.x.y)
tidyr::tibble(x.i = 1:nrow(dist.name),
x.name = x[x.i],
y.i = apply(dist.name, 1, which.min),
y.name = y[y.i],
distance = apply(dist.name, 1, min))
# find pairs with minimum distance
match.x.y <- tidyr::tibble(x.i = 1:nrow(dist.name),
x.name = x[x.i],
y.i = apply(dist.name, 1, which.min),
y.name = y[y.i],
distance = apply(dist.name, 1, min))
Q
# find pairs with minimum distance
match.x.y <- tidyr::tibble(x.i = 1:nrow(dist.name),
x.name = x[x.i],
y.i = apply(dist.name, 1, which.min),
y.name = y[y.i],
distance = apply(dist.name, 1, min))
match.x.y
View(match.x.y)
Q
Q
Q
Q
Q
Q
Q
c
Q
f
s
n
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
pdf_location <- "/Users/Alice/Documents/Masters/threats_texts_map/pdfs"
references_file <- '/Users/Alice/Documents/Masters/Masters_analysis/masters_analysis/journals_w_abstract.ris'
# import the references
references <- revtools::read_bibliography(references_file)
references$paper_id <- paste0('p', c(1:length(references$label)))
# import the pdfs
paper_texts <- importPDFs(pdf_location)
importPDFs <- function(pdf_location){
# get original working directory
original_wd <- getwd()
# list file names
setwd(pdf_location)
files <- list.files(pattern = "pdf$")
# pdfs must have been saved with the paper title in their file title
paper_text <- lapply(files, pdftools::pdf_text)
names(paper_text) <- files
setwd(original_wd)
return(paper_text)
}
# import the pdfs
paper_texts <- importPDFs(pdf_location)
x = references$label
y = names(paper_texts)
x
View(references)
# create a matrix with the Standard Levenshtein distance between the two vectors
dist.name <- adist(tm::removePunctuation(x),
tm::removePunctuation(y),
partial = TRUE,
ignore.case = TRUE,
costs = c(1, 0.5, 1))
# find pairs with minimum distance
match.x.y <- tidyr::tibble(x.i = 1:nrow(dist.name),
x.name = x[x.i],
y.i = apply(dist.name, 1, which.min),
y.name = y[y.i],
distance = apply(dist.name, 1, min))
View(match.x.y)
x = references$title
# create a matrix with the Standard Levenshtein distance between the two vectors
dist.name <- adist(tm::removePunctuation(x),
tm::removePunctuation(y),
partial = TRUE,
ignore.case = TRUE,
costs = c(1, 0.5, 1))
# find pairs with minimum distance
match.x.y <- tidyr::tibble(x.i = 1:nrow(dist.name),
x.name = x[x.i],
y.i = apply(dist.name, 1, which.min),
y.name = y[y.i],
distance = apply(dist.name, 1, min))
View(match.x.y)
### FUNCTION -------------------------------------------------------------
fuzzymatchpairs <- function(x,y){
# create a matrix with the Standard Levenshtein distance between the two vectors
dist.name <- adist(tm::removePunctuation(x),
tm::removePunctuation(y),
partial = TRUE,
ignore.case = TRUE,
costs = c(1, 0.5, 1))
# find pairs with minimum distance
match.x.y <- tidyr::tibble(x.i = 1:nrow(dist.name),
x.name = x[x.i],
y.i = apply(dist.name, 1, which.min),
y.name = y[y.i],
distance = apply(dist.name, 1, min))
return(match.x.y)
}
# import the pdfs
matched_titles <- fuzzymatchpairs(x = references$title, y = names(paper_texts))
View(matched_titles)
View(paper_texts)
paper_texts[["Acharya et al._2009_Rapid population declines of Himalayan Griffon Gyps himalayensis in Upper Mustang, Nepal-annotated.pdf"]]
paper_text <- replace_non_ascii(paper_texts, replacement = "", remove.nonconverted = TRUE)
paper_text <- tm::replace_non_ascii(paper_texts, replacement = "", remove.nonconverted = TRUE)
textclean::replace_non_ascii(paper_texts, replacement = "", remove.nonconverted = TRUE)
install.packages("textclean")
paper_text <- textclean::replace_non_ascii(paper_texts, replacement = "", remove.nonconverted = TRUE)
paper_text
# these functions seem to magically unlist paper_text (and are used for basic cleaning)
paper_text <- textclean::replace_non_ascii(paper_texts, replacement = "", remove.nonconverted = TRUE) %>%  # remove non-ascii characters
tm::replace_white(paper_text) %>%
tm::stripWhitespace(paper_text) %>%  # remove white space
tm::removePunctuation(paper_text)  # remove punctuation
devtools::document()
devtools::load_all()
# these functions seem to magically unlist paper_text (and are used for basic cleaning)
paper_text <- textclean::replace_non_ascii(paper_texts, replacement = "", remove.nonconverted = TRUE) %>%  # remove non-ascii characters
tm::replace_white(paper_text) %>%
tm::stripWhitespace(paper_text) %>%  # remove white space
tm::removePunctuation(paper_text)  # remove punctuation
library(magrittr)
# these functions seem to magically unlist paper_text (and are used for basic cleaning)
paper_text <- textclean::replace_non_ascii(paper_texts, replacement = "", remove.nonconverted = TRUE) %>%  # remove non-ascii characters
tm::replace_white(paper_text) %>%
tm::stripWhitespace(paper_text) %>%  # remove white space
tm::removePunctuation(paper_text)  # remove punctuation
# these functions seem to magically unlist paper_text (and are used for basic cleaning)
paper_text <- iconv(paper_text, to = 'ASCII') %>%  # remove non-ascii characters
textclean::replace_white(paper_text) %>%
tm::stripWhitespace(paper_text) %>%  # remove white space
tm::removePunctuation(paper_text)  # remove punctuation
# these functions seem to magically unlist paper_text (and are used for basic cleaning)
paper_text <- iconv(paper_text, to = 'ASCII') %>%  # remove non-ascii characters
textclean::replace_white() %>%
tm::stripWhitespace() %>%  # remove white space
tm::removePunctuation()  # remove punctuation
# remove preceeding c's
for(i in 1:length(paper_text)){
if(substring(paper_text[i],1,1)=="c"){
paper_text[i] <- substring(paper_text[i],2)
}
}
paper_text <- tidyr::tibble(paper_name = names(paper_texts),
original_paper_text = lapply(paper_texts,
function(X) paste(X,
sep = ' ',
collapse = ' '
)
)
)
View(paper_text)
paper_text <- tidyr::tibble(paper_name = names(paper_texts),
original_paper_text = lapply(paper_texts,
function(X) paste(X,
sep = ' ',
collapse = ' '
)
) %>%
unlist(),
modified_paper_text = iconv(paper_text, to = 'ASCII') %>%  # convert to ascii characters
textclean::replace_white() %>%
tm::stripWhitespace() %>%  # remove white space
tm::removePunctuation()  # remove punctuation
)
View(paper_text)
paper_text <- tidyr::tibble(paper_name = names(paper_texts),
original_paper_text = lapply(paper_texts,
function(X) paste(X,
sep = ' ',
collapse = ' '
)
) %>%
unlist(),
modified_paper_text = iconv(paper_texts, to = 'ASCII') %>%  # convert to ascii characters
textclean::replace_white() %>%
tm::stripWhitespace() %>%  # remove white space
tm::removePunctuation()  # remove punctuation
)
paper_text <- tidyr::tibble(paper_name = names(paper_texts),
original_paper_text = lapply(paper_texts,
function(X) paste(X,
sep = ' ',
collapse = ' '
)
) %>%
unlist(),
modified_paper_text = iconv(original_paper_text, to = 'ASCII') %>%  # convert to ascii characters
textclean::replace_white() %>%
tm::stripWhitespace() %>%  # remove white space
tm::removePunctuation()  # remove punctuation
)
paper_text <- tidyr::tibble(paper_name = names(paper_texts),
original_paper_text = lapply(paper_texts,
function(X) paste(X,
sep = ' ',
collapse = ' '
)
) %>%
unlist(),
modified_paper_text = iconv(original_paper_text, to = 'ASCII') %>%  # convert to ascii characters
textclean::replace_white() %>%
tm::stripWhitespace() %>%  # remove white space
tm::removePunctuation() %>%   # remove punctuation
ifelse(test = substring(.,1,1)=="c", # remove copyright c from start if present
yes = substring(.,2),
no = .)
)
install.packages("usethis")
usethis::use_data_raw(name = 'bird_search_terms')
## code to prepare `bird_search_terms` dataset goes here
names <- tidyRedlist::tidied_all_birds %>%
birdDataScrapeR::getIOCNames() %>%
.$names
## code to prepare `bird_search_terms` dataset goes here
names <- tidyRedlist::tidied_all_birds %>%
birdDataScrapeR::getIOCNames(formatted_IOC = birdDataScrapeR::formatted_IOC) %>%
.$names
## code to prepare `bird_search_terms` dataset goes here
library(birdDataScrapeR)
names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names
View(names)
c
search_terms <- birdDataScrapeR::regexSearchTerms(names)
search_terms <- birdDataScrapeR::regexSearchTerms(names$name)
search_terms
detach("package:birdDataScrapeR", unload=TRUE)
## code to prepare `bird_search_terms` dataset goes here
library(birdDataScrapeR)
search_terms <- birdDataScrapeR::regexSearchTerms(names)
View(search_terms)
## code to prepare `bird_search_terms` dataset goes here
library(birdDataScrapeR)
names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
birdDataScrapeR::findOverlappingNames()
names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
tidyRedlist::findOverlappingNames()
