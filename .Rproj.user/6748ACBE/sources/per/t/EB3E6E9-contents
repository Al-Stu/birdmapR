#-------------------------------------------------------------------------#
#---------------------------- RED LIST DATA  -----------------------------#
#-------------------------------------------------------------------------#

# RL.IMPORT
# import and neaten RL data

# author: alice stuart | date modified: 2020-03-11
# compiled in R version 3.6.3 (2020-03-12) -- "Holding the Windsock" running x86_64-apple-darwin15.6.0
# merge dataframes with one line per species

RL.tidy <- function(species_data){
  species_data_tidied <- species_data %>%
    RL.tidyspdata() %>%
    RL.splitcodes()



  return(species_data)
}

RL.criteriaclean <- function(redCriteria){
  redCriteria$internalTaxonId <- as.character(redCriteria$internalTaxonId)
  to_columns <- RL.criteriatocolumns(redCriteria$redlistCriteria,'[+]','^.','[0-9].*$')
  to_columns_pivot <-  RL.pivottocolumns(redCriteria,to_columns)
  l2_to_columns <- RL.criteriatocolumnsl2(input = to_columns_pivot$criterion,pattern = '')
  l2_to_columns_pivot <-  RL.pivottocolumns(to_columns_pivot,l2_to_columns)
  l3_to_columns <- splittocolumns(l2_to_columns_pivot$criterion,pattern = '') %>%
    dplyr::bind_cols(l2_to_columns_pivot[,1]) %>%
    dplyr::right_join(redCriteria[,c(1,2)]) %>%
    dplyr::select(`internalTaxonId`,`scientificName`, everything()) %>%
    dplyr::rename(level1=`V1`,
                  level2=`V2`,
                  level3=`V3`) %>%
    dplyr::filter(!is.na(`level1`))
  return(l3_to_columns)
}

RL.criteriatocolumns <- function(input,pattern,first_half,second_half){
  to_columns <- input %>%
    splittocolumns(pattern = pattern) %>%
    dplyr::mutate(letter = stringr::str_extract(V1,first_half),
                  V1 = stringr::str_extract(V1,second_half)) %>%
    pastelasttoall()
}

RL.criteriatocolumnsl2 <- function(input,pattern){
  to_columns <- input %>%
    splittocolumns(pattern = pattern) %>%
    tidyr::unite(col='letter',`V1`,`V2`,sep='') %>%
    pastefirsttoall()
  return(to_columns[,-1])
}

RL.pivottocolumns <- function(redCriteria,to_columns){
  dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
    dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
    tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
    dplyr::select(c(`internalTaxonId`, `criterion`)) %>%
    dplyr::filter(!is.na(`criterion`))
}

pastelasttoall <- function(to_columns){
  for(i in 1:(ncol(to_columns)-1)){
    for(j in 1:nrow(to_columns)){
      if(!is.na(to_columns[j,i])){
        to_columns[j,i] <- paste(to_columns[j,ncol(to_columns)],to_columns[j,i],sep='',collapse='')
      }
    }
  }
  return(to_columns)
}

pastefirsttoall <- function(to_columns){
  for(i in 2:(ncol(to_columns))){
    for(j in 1:nrow(to_columns)){
      if(!is.na(to_columns[j,i])){
        to_columns[j,i] <- paste(to_columns[j,1],to_columns[j,i],sep='',collapse='')
      }
    }
  }
  return(to_columns)
}

RL.splitcodes <- function(list){
  inc_code <- list %>%
    sapply(colnames) %>%
    grepl(pattern = 'code')
  collate_list <- list[inc_code]
  code_numeric <- collate_list %>%
    sapply(function(x) dplyr::select(x,`code`)) %>%
    grepl(pattern = '[0-9]')
  collate_list <- collate_list[code_numeric]
  split_code <- list()
  list_replacement <- list()
  for(i in 1:length(collate_list)){
    split_code[[i]] <- collate_list[[i]] %>%
      dplyr::select(`code`) %>%
      splittocolumns(pattern = '[.]')
    names(split_code[[i]]) <- paste('code_l',c(1:ncol(split_code[[i]])),sep='')
    list_replacement[[names(collate_list)[i]]] <- dplyr::bind_cols(collate_list[[i]],split_code[[i]])
  }
  result <- list[!grepl(x = names(list),pattern = paste(names(list_replacement),sep='|',collapse='|'))] %>%
    c(list_replacement)
  return(result)
}

RL.tidyspdata <- function(species_data){
  internalTaxonId <- species_data[['assessments']]$internalTaxonId
  name <- c('systems','realm','redlistCriteria')
  columns <- dplyr::select(species_data[['assessments']],all_of(name))
  species_data[['assessments']] <- dplyr::select(species_data[['assessments']],-all_of(name))
  species_data <- c(species_data,
                    splittotidy(columns = columns,IDs = internalTaxonId,pattern = c('[|]','[|]',';'),name = name))
  collate_list <- species_data[as.vector(sapply(species_data,nrow))==nrow(species_data[['assessments']])]
  species_data <- species_data[!as.vector(sapply(species_data,nrow))==nrow(species_data[['assessments']])]
  species_data[['species_data']] <- joinall(collate_list)
  species_data <- RL.addtaxonid(species_data)
  species_data[['common_names']]$source <- rep_len('RL',nrow(species_data[['common_names']]))
  species_data[['synonyms']]$source <- rep_len('RL',nrow(species_data[['synonyms']]))
  species_data[['redlistCriteria']] <- RL.criteriaclean(species_data[['redlistCriteria']])
  return(species_data)
}

RL.addtaxonid <- function(list){
  if(any(grepl('species_data',names(list)))){
    result <- sapply(list, function(x) dplyr::right_join(x, list[['species_data']][,c(1,2)]))
  } else if(any(grepl('assessments',names(list)))){
    result <- sapply(list, function(x) dplyr::right_join(x, list[['assessments']][,c(1,2)]))
  } else {
    stop('Could not find source for internalTaxonId, check your list includes either "species data" or "assessments"')
  }
  result <- sapply(result, function(x) dplyr::select(x, `internalTaxonId`,`scientificName`,dplyr::everything()))
  return(result)
}

splittocolumns <- function(x,pattern){
  x <- as.matrix(x)
  split_x <- as.character(x) %>%
    stringr::str_split(pattern = pattern) %>%
    sapply(stringr::str_trim)
  if(class(split_x)=='list'){
    max_len <- max(sapply(split_x,length))
    ncol <- split_x %>% sapply(length) %>% max()
    split_df <- matrix(nrow = length(x),ncol = ncol)
    for(i in 1:max_len){
      split_df[,i] <- sapply(split_x, function(x) unlist(x)[i])
    }
    split_tibble <- tidyr::as_tibble(split_df)
  } else if(class(split_x)=='matrix'){
    split_tibble <- tidyr::as_tibble(t(split_x))
  } else if(class(split_x)=='vector'|class(split_x)=='character'){
    split_tibble <- split_x %>%
      as.matrix() %>%
      tidyr::as_tibble()
  }
  return(split_tibble)
}


# will take (e.g. Palearctic|Afrotropical) a tibble of concatenated columns and species IDs and will return a list with tibbles with IDs and split results for each column
splittotidy <- function(columns,IDs,pattern,name){
  split_data <- list()
  for(i in 1:ncol(columns)){
    temp_id <- tidyr::tibble(internalTaxonId = IDs)
    temp <- columns[,i] %>%
      splittocolumns(pattern = pattern[i]) %>%
      dplyr::bind_cols(temp_id)
    split_data[[i]] <- tidyr::pivot_longer(temp,-ncol(temp), values_to = name[i]) %>%
      dplyr::select(c(`internalTaxonId`, name[i]))
    to_remove <- split_data[[i]] %>%
      dplyr::select(2) %>%
      is.na()
    split_data[[i]] <- dplyr::filter(split_data[[i]],!to_remove)
  }
  names(split_data) <- name
  return(split_data)
}

joinall <- function(list){
  result <- list[[1]]
  for(i in 2:length(list)){
    result <- dplyr::left_join(result,list[[i]])
  }
  return(result)
}

