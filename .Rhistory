findOverlappingNames()
tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower() %>%
gsub(pattern = '-', replacement = ' '
)
)
tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower() %>%
gsub(pattern = '-', replacement = ' '
)
) %>%
findOverlappingNames()
library(tidyRedlist)
names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower() %>%
gsub(pattern = '-', replacement = ' '
)
) %>%
findOverlappingNames()
devtools::document()
devtools::document()
devtools::document()
names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower() %>%
gsub(pattern = '-', replacement = ' '
)
) %>%
findOverlappingNames()
devtools::document()
names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower() %>%
gsub(pattern = '-', replacement = ' '
)
) %>%
findOverlappingNames()
View(names)
search_terms <- tidyr::unnest(names[ , c(3,2)],
positiveSearchTerms) %>%
birdDataScrapeR::regexSearchTerms()
search_terms <- tidyr::unnest(names[ , c(3,1)],
positiveSearchTerms) %>%
birdDataScrapeR::regexSearchTerms()
warnings()
View(search_terms)
tidyr::unnest(names[ , c(3,1)],
positiveSearchTerms)
search_terms <- tidyr::unnest(names[ , c(3,1)],
positiveSearchTerms) %>%
rename(name = positiveSearchTerms) %>%
birdDataScrapeR::regexSearchTerms()
search_terms <- tidyr::unnest(names[ , c(3,1)],
positiveSearchTerms) %>%
dplyr::rename(name = positiveSearchTerms) %>%
birdDataScrapeR::regexSearchTerms()
View(search_terms)
View(search_terms)
all_names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower() %>%
gsub(pattern = '-', replacement = ' '
)
)
overlap_checked_names <- names
search_terms <- tidyr::unnest(overlap_checked_names[ , c(3,1)],
positiveSearchTerms) %>%
dplyr::rename(name = positiveSearchTerms) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'name', 'language')]) %>%
birdDataScrapeR::regexSearchTerms()
View(search_terms)
usethis::use_data(bird_search_terms, overwrite = TRUE)
bird_search_terms <- search_terms%>%
dplyr::left_join(overlap_checked_names)
usethis::use_data(bird_search_terms, overwrite = TRUE)
devtools::load_all()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
# install birdMapR ---------------
devtools::load_all()
# import papers ----------------
# set file location
pdf_location <- "/Users/Alice/Documents/Masters/threats_texts_map/pdfs"
# put your file path to the folder containing your pdfs here, the files are
# sensibly names as file names will be used as identifiers for each text
# import pdfs
pdfs <-importPDFs(pdf_location)
paper_texts <- pdfs
paper_text <- tidyr::tibble(paper_name = names(paper_texts),
original_paper_text = lapply(paper_texts,
function(X) paste(X,
sep = ' ',
collapse = ' '
)
) %>%
unlist(),
cleaned_paper_text = iconv(original_paper_text, to = 'ASCII') %>%  # convert to ascii characters
textclean::replace_white() %>%
tm::stripWhitespace() %>%  # remove white space
tm::removePunctuation() %>%   # remove punctuation
ifelse(test = substring(.,1,1)=="c", # remove copyright c from start if present
yes = substring(.,2),
no = .) %>%
tm::removeNumbers()
)
View(paper_text)
tidyr::tibble(paper_name = names(paper_texts),
original_paper_text = lapply(paper_texts,
function(X) paste(X,
sep = ' ',
collapse = ' '
)
) %>%
unlist(),
cleaned_paper_text = iconv(original_paper_text, to = 'ASCII') # %>%  # convert to ascii characters
# textclean::replace_white() %>%
# tm::stripWhitespace() %>%  # remove white space
# tm::removePunctuation() %>%   # remove punctuation
# ifelse(test = substring(.,1,1)=="c", # remove copyright c from start if present
#        yes = substring(.,2),
#        no = .) %>%
# tm::removeNumbers()
)
tidyr::tibble(paper_name = names(paper_texts),
original_paper_text = lapply(paper_texts,
function(X) paste(X,
sep = ' ',
collapse = ' '
)
) %>%
unlist(),
cleaned_paper_text = textclean::replace_non_ascii(original_paper_text,
replacement = "",
remove.nonconverted = TRUE) %>%  # convert to ascii characters
textclean::replace_white() %>%
tm::stripWhitespace() %>%  # remove white space
tm::removePunctuation() %>%   # remove punctuation
ifelse(test = substring(.,1,1)=="c", # remove copyright c from start if present
yes = substring(.,2),
no = .) %>%
tm::removeNumbers()
)
devtools::document()
paper_text <- tidyr::tibble(paper_name = names(paper_texts),
original_paper_text = lapply(paper_texts,
function(X) paste(X,
sep = ' ',
collapse = ' '
)
) %>%
unlist(),
cleaned_paper_text = textclean::replace_non_ascii(original_paper_text,
replacement = "",
remove.nonconverted = TRUE) %>%  # convert to ascii characters
textclean::replace_white() %>%
tm::stripWhitespace() %>%  # remove white space
tm::removePunctuation() %>%   # remove punctuation
ifelse(test = substring(.,1,1)=="c", # remove copyright c from start if present
yes = substring(.,2),
no = .) %>%
tm::removeNumbers()
)
if(remove_stop_words){
paper_text$cleaned_paper_text <- tm::removeWords(paper_text$cleaned_paper_text,
tm::stopwords("english"))
}
if(remove_post_text){
paper_text$cleaned_paper_text <- removePostText(paper_text$cleaned_paper_text)
}
# create column with all lower case
paper_text$cleaned_paper_text_lower_case <- tolower(paper_text$cleaned_paper_text)
paper_text
all_names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower() %>%
gsub(pattern = '-', replacement = ' '
)
)
## code to prepare `bird_search_terms` dataset goes here
library(birdDataScrapeR)
library(tidyRedlist)
library(magrittr)
all_names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower() %>%
gsub(pattern = '-', replacement = ' '
)
)
overlap_checked_names <- findOverlappingNames(all_names)
bird_search_terms <- tidyr::unnest(overlap_checked_names[ , c(3,1)],
positiveSearchTerms) %>%
dplyr::rename(name = positiveSearchTerms) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'scientificName', 'name', 'language')]) %>%
birdDataScrapeR::regexSearchTerms() %>%
dplyr::left_join(overlap_checked_names)
devtools::load_all()
overlap_checked_names <- findOverlappingNames(all_names)
bird_search_terms <- tidyr::unnest(overlap_checked_names[ , c(3,1)],
positiveSearchTerms) %>%
dplyr::rename(name = positiveSearchTerms) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'scientificName', 'name', 'language')]) %>%
birdDataScrapeR::regexSearchTerms() %>%
dplyr::left_join(overlap_checked_names)
View(bird_search_terms)
bird_search_terms <- bird_search_terms %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'scientificName')])
usethis::use_data(bird_search_terms, overwrite = TRUE)
devtools::document()
version()
## code to prepare `bird_search_terms` dataset goes here
library(birdDataScrapeR)
library(tidyRedlist)
library(magrittr)
all_names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower() %>%
gsub(pattern = '-', replacement = ' '
)
)
## code to prepare `bird_search_terms` dataset goes here
library(birdDataScrapeR)
library(tidyRedlist)
library(magrittr)
all_names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower() %>%
gsub(pattern = '-', replacement = ' '
)
)
overlap_checked_names <- findOverlappingNames(all_names)
devtools::load_all()
overlap_checked_names <- findOverlappingNames(all_names)
bird_search_terms <- tidyr::unnest(overlap_checked_names[ , c(3,1)],
positiveSearchTerms) %>%
dplyr::rename(name = positiveSearchTerms) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'name', 'language')]) %>%
birdDataScrapeR::regexSearchTerms() %>%
dplyr::left_join(overlap_checked_names) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'scientificName')])
View(bird_search_terms)
usethis::use_data(overlap_checked_names, overwrite = TRUE)
devtools::document()
devtools::load_all()
bird_search_terms <- tidyr::unnest(overlap_checked_names[ , c(3,1)],
positiveSearchTerms) %>%
dplyr::rename(name = positiveSearchTerms) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'name', 'language')]) %>%
birdDataScrapeR::regexSearchTerms() %>%
dplyr::left_join(overlap_checked_names) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'scientificName')])
## code to prepare `bird_search_terms` dataset goes here
library(birdDataScrapeR)
library(tidyRedlist)
library(magrittr)
all_names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower() %>%
gsub(pattern = '-', replacement = ' '
)
)
bird_search_terms <- tidyr::unnest(overlap_checked_names[ , c(3,1)],
positiveSearchTerms) %>%
dplyr::rename(name = positiveSearchTerms) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'name', 'language')]) %>%
birdDataScrapeR::regexSearchTerms() %>%
dplyr::left_join(overlap_checked_names) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'scientificName')])
View(bird_search_terms)
## code to prepare `bird_search_terms` dataset goes here
library(birdDataScrapeR)
library(tidyRedlist)
library(magrittr)
all_names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower() %>%
gsub(pattern = '-', replacement = ' '
)
)
bird_search_terms <- tidyr::unnest(overlap_checked_names[ , c(3,1)],
positiveSearchTerms) %>%
dplyr::rename(name = positiveSearchTerms) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'name', 'language')]) %>%
birdDataScrapeR::regexSearchTerms() %>%
dplyr::left_join(overlap_checked_names) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'scientificName')])
devtools::load_all()
## code to prepare `bird_search_terms` dataset goes here
library(birdDataScrapeR)
library(tidyRedlist)
library(magrittr)
all_names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower()
)
all_names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name
)
all_names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower()
)
bird_search_terms <- tidyr::unnest(overlap_checked_names[ , c(3,1)],
positiveSearchTerms) %>%
dplyr::rename(name = positiveSearchTerms) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'name', 'language')]) %>%
birdDataScrapeR::regexSearchTerms() %>%
dplyr::left_join(overlap_checked_names) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'scientificName')])
View(bird_search_terms)
usethis::use_data(bird_search_terms, overwrite = TRUE)
devtools::load_all()
#eCaps <- list(chromeOptions = list(args = c('--headless', '--disable-gpu', '--window-size=1280,800')))
rD <- RSelenium::rsDriver() # extraCapabilities = eCaps
install.packages("RSelenium")
#eCaps <- list(chromeOptions = list(args = c('--headless', '--disable-gpu', '--window-size=1280,800')))
rD <- RSelenium::rsDriver() # extraCapabilities = eCaps
remDr <- rD[["client"]]
remDr <- rD[["client"]]
#eCaps <- list(chromeOptions = list(args = c('--headless', '--disable-gpu', '--window-size=1280,800')))
rD <- RSelenium::rsDriver() # extraCapabilities = eCaps
closerD(remDr, rD)
remDr$close()
rD[["server"]]$stop()
rm(rD)
gc()
#eCaps <- list(chromeOptions = list(args = c('--headless', '--disable-gpu', '--window-size=1280,800')))
rD <- RSelenium::rsDriver() # extraCapabilities = eCaps
#eCaps <- list(chromeOptions = list(args = c('--headless', '--disable-gpu', '--window-size=1280,800')))
rD <- RSelenium::rsDriver() # extraCapabilities = eCaps
remDr$close()
rD[["server"]]$stop()
rm(rD)
gc()
#eCaps <- list(chromeOptions = list(args = c('--headless', '--disable-gpu', '--window-size=1280,800')))
rD <- RSelenium::rsDriver() # extraCapabilities = eCaps
remDr <- rD[["client"]]
remDr$navigate('https://commons.wikimedia.org')
Sys.sleep(0.5)
search_terms <- c("great snipe")
keystosearchbox(remDr, '//*[@id="searchInput"]', search_terms[1])
findandclick(remDr, '//*[@id="searchButton"]')
keystosearchbox(remDr, '//*[@id="ooui-php-1"]', search_terms[1])
findandclick(remDr, '/html/body/div[3]/div[3]/div[4]/div[2]/form/div[4]/div[1]/span/a/span[3]')
findandclick(remDr, '/html/body/div[3]/div[3]/div[4]/div[2]/form/div[4]/div[1]/div/div/fieldset[3]/div/div[1]/div/div/div/div/span/span[3]')
findandclick(remDr, '/html/body/div[6]/div[13]/div[3]/span[3]')
search_terms <- tibble(positive = list(c("great snipe", "gallinago media")), negative = list(c("egg", "drawing", "illustration", "plate")))
search_terms <- tidyr::tibble(positive = list(c("great snipe", "gallinago media")), negative = list(c("egg", "drawing", "illustration", "plate")))
search_terms
paste(search_terms$negative[1], collapse = ", ")
keystosearchbox(remDr, '//*[@id="ooui-45"]', paste(search_terms$negative[1], collapse = ", "))
paste(search_terms$negative[[1]], collapse = ", ")
keystosearchbox(remDr, '//*[@id="ooui-45"]', paste(search_terms$negative[[1]], collapse = ", "))
keystosearchbox(remDr, '//*[@id="ooui-php-1"]', paste0('"', paste(search_terms$positive[1], collapse = '" OR "'), '"'))
keystosearchbox(remDr, '//*[@id="ooui-php-1"]', paste0('"', paste(search_terms$positive[[1]], collapse = '" OR "'), '"'))
findandclick(remDr, '/html/body/div[3]/div[3]/div[4]/div[2]/form/div[1]/div/div/div/span/span/button/span[2]')
file_path <- "/Users/Alice/Documents/wikimedia_thumbs"
results <- remDr$findElement("xpath", '/html/body/div[3]/div[3]/div[4]/div[3]/ul')
results
closerD()
closerD(remDr, rD)
CE_papers <- read.csv("/Users/Alice/Documents/Masters/CE_birds_paper_references/CE_paper_reference_and_summary_cleaned.csv")
texts <- CE_papers$cleaned_text
text_ids <- CE_papers$label
devtools::load_all()
search_string <- bird_search_terms$regex_both
search_id <- bird_search_terms$scientificName
view(bird_search_terms)
View(bird_search_terms)
bird_search_terms <- unique(bird_search_terms)
usethis::use_data(bird_search_terms, overwrite = TRUE)
search_string <- bird_search_terms$regex_both
search_id <- bird_search_terms$scientificName
text <- texts[1]
View(bird_search_terms)
text_words <- str_split(text, pattern = " ")
text_words
text_words <- str_split(text, pattern = " ") %>%
.[[1]] %>%
.[. != ""]
text_words
search_words <- str_split(search_string, pattern = "[ ]|[|]")
search_words
search_words <- str_split(search_string, pattern = "[ ]|[|]") %>%
lapply(function(X) X[X != "NA" & str_length(X) > 1])
search_words
worth_checking_for <- sapply(search_words, function(X) any(text_words %in% X))
worth_checking_for
whichTermsToSearch <- function(text, search_string){
text_words <- str_split(text, pattern = " ") %>%
.[[1]] %>%
.[. != ""]
search_words <- str_split(search_string, pattern = "[ ]|[|]") %>%
lapply(function(X) X[X != "NA" & str_length(X) > 1])
worth_checking_for <- sapply(search_words, function(X) any(text_words %in% X))
return(worth_checking_for)
}
devtools::load_all()
remove(whichTermsToSearch())
remove(whichTermsToSearch
)
devtools::load_all()
texts <- texts[1:20]
text_ids <- text_ids[1:20]
instances <- instancesNoOverlap(texts, search_string, text_ids, search_id)
result <- matrix(nrow = length(search_string), ncol = length(texts))
for(p in 1:length(texts)){
search_terms_to_search <- whichTermsToSearch(texts[p], search_string)
locations <- stringr::str_locate_all(string = texts[p], pattern = search_string[search_terms_to_search]) # create list with start and end of each instance of search string in each paper text
locations_2 <- locations
for(j in 1: length(locations)){
if(length(locations[[j]])==0){
locations_2[[j]] <- locations[[j]]
}else{
if(length(locations[[j]])==2){
uses <- withinlist(locations,locations[[j]])
if(sum(sapply(uses,sum))>1){
locations_2[[j]] <- data.frame(start=double(),end=double())
}
}else{
if(length(locations[[j]])>2){
to_delete <- c()
for(l in nrow(locations[[j]]):1){
uses <- withinlist(locations,locations[[j]][l,])
if(sum(sapply(uses,sum))>1){
to_delete <- c(to_delete,l)
}
}
if(length(to_delete)!=0){
locations_2[[j]] <- locations[[j]][-to_delete,]
}
}
}
}
}
no_uses <- as.numeric(lapply(locations_2, length))/2 # list with number of instances of search string in each paper text, as locations is a list, length returns number of items in the list (i.e. nrow x ncol), two columns so divide by two to get nrow (should probably just use nrow function)
result[,p] <- unlist(no_uses) # put number of instances into vector
}
no_uses
locations_2
result
no_uses <- as.numeric(lapply(locations_2, nrow))
no_uses
result[search_terms_to_search,p] <- unlist(no_uses) # put number of instances into vector
devtools::load_all()
instances <- instancesNoOverlap(texts, search_string, text_ids, search_id)
View(instances)
texts[2]
devtools::load_all()
## code to prepare `bird_search_terms` dataset goes here
library(birdDataScrapeR)
library(tidyRedlist)
library(magrittr)
all_names <- tidyRedlist::tidied_all_birds %>%
getIOCNames() %>%
.$names %>%
dplyr::mutate(name = name %>%
tolower()
)
bird_search_terms <- tidyr::unnest(overlap_checked_names[ , c(3,1)],
positiveSearchTerms) %>%
dplyr::rename(name = positiveSearchTerms) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'name', 'language')]) %>%
birdDataScrapeR::regexSearchTerms() %>%
dplyr::left_join(overlap_checked_names) %>%
dplyr::left_join(all_names[ , c('internalTaxonId', 'scientificName')]) %>%
unique()
View(bird_search_terms)
devtools::load_all()
devtools::document()
devtools::install()
