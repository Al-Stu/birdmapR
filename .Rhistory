'[^\\s]',
sep = '',
collapse = '|')) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
split_texts[[i]]
split_contents[[i]]
stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'[^\\s]',
sep = '',
collapse = '|'))
stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'[|\\n',
sep = '',
collapse = '|'))
stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\[|\\n',
sep = '',
collapse = '|'))
stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\[|\\n',
sep = '',
collapse = '|'))
split_contents <- stringr::str_split(string = contents, pattern = '\\n') %>%
sapply(function(x) gsub(pattern = '^[0-9][.]*[0-9]* ', replacement = '', x = x))
split_texts <- list()
for(i in 1:length(text)){
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\[|\\n',
sep = '',
collapse = '|')) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
if(!any(is.na(split_contents[[i]]))){
names(split_texts[[i]]) <- split_contents[[i]]
names(split_texts[[i]])[1] <- 'introduction'
}
}
View(split_texts)
split_texts[[26]]
View(split_contents)
split_contents[[25]]
split_texts[[25]]
split_contents <- stringr::str_split(string = contents, pattern = '\\n') %>%
sapply(function(x) gsub(pattern = '^[0-9][.]*[0-9]* ', replacement = '', x = x))
split_texts <- list()
for(i in 1:length(text)){
if(any(grepl(pattern = paste('\\n', split_contents[[i]], '\\[')[2], x = text[i]))){
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\[',
sep = '',
collapse = '|')) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
} else {
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|')) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
}
if(!any(is.na(split_contents[[i]]))){
names(split_texts[[i]]) <- split_contents[[i]]
names(split_texts[[i]])[1] <- 'introduction'
}
}
i
any(grepl(pattern = paste('\\n', split_contents[[i]], '\\[')[2], x = text[i]))
paste('\\n', split_contents[[i]], '\\[')[2]
stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\[',
sep = '',
collapse = '|'))
pattern = paste('\\n', split_contents[[i]], '\\[', sep = '', collapse = '|')
any(grepl(pattern = pattern, x = text[i]))
split_contents <- stringr::str_split(string = contents, pattern = '\\n') %>%
sapply(function(x) gsub(pattern = '^[0-9][.]*[0-9]* ', replacement = '', x = x))
split_texts <- list()
for(i in 1:length(text)){
pattern = paste('\\n', split_contents[[i]], '\\[', sep = '', collapse = '|')
if(any(grepl(pattern = pattern, x = text[i]))){
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
} else {
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|')) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
}
if(!any(is.na(split_contents[[i]]))){
names(split_texts[[i]]) <- split_contents[[i]]
names(split_texts[[i]])[1] <- 'introduction'
}
}
View(split_texts)
split_texts[[1]]
split_texts[[11]]
split_contents[[11]]
split_contents
split_contents <- stringr::str_split(string = contents, pattern = '\\n') %>%
sapply(function(x) gsub(pattern = '^[0-9][.]*[0-9]* ', replacement = '', x = x))
split_texts <- list()
for(i in 1:length(text)){
if(!is.na(split_contents[[i]])){
pattern = paste('\\n', split_contents[[i]], '\\[', sep = '', collapse = '|')
} else {
pattern = paste('\\n', c('References|External links'), '\\[', sep = '', collapse = '|')
}
if(any(grepl(pattern = pattern, x = text[i]))){
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
} else {
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|')) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
}
if(!any(is.na(split_contents[[i]]))){
names(split_texts[[i]]) <- split_contents[[i]]
names(split_texts[[i]])[1] <- 'Introduction'
} else {
names(split_texts[[i]]) <-
c('Introduction','References','External links')[1:length(split_texts[[i]])]
}
}
warnings()
split_contents <- stringr::str_split(string = contents, pattern = '\\n') %>%
sapply(function(x) gsub(pattern = '^[0-9][.]*[0-9]* ', replacement = '', x = x))
split_texts <- list()
for(i in 1:length(text)){
if(!all(is.na(split_contents[[i]]))){
pattern = paste('\\n', split_contents[[i]], '\\[', sep = '', collapse = '|')
} else {
pattern = paste('\\n', c('References|External links'), '\\[', sep = '', collapse = '|')
}
if(any(grepl(pattern = pattern, x = text[i]))){
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
} else {
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|')) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
}
if(!any(is.na(split_contents[[i]]))){
names(split_texts[[i]]) <- split_contents[[i]]
names(split_texts[[i]])[1] <- 'Introduction'
} else {
names(split_texts[[i]]) <-
c('Introduction','References','External links')[1:length(split_texts[[i]])]
}
}
split_texts[[11]]
View(split_texts)
split_texts[[23]]
split_texts[[22]]
split_texts[[21]]
split_texts[[12]]
devtools::load_all()
library(tidyRedlist)
species_data <- cleaned_otidiformes_data
species <- species_data[['assessments']]$scientificName
devtools::load_all()
texts <- wikiScrape(species)
closerD(remDr, rD)
eCaps <- list(chromeOptions = list(
args = c('--headless', '--disable-gpu', '--window-size=1280,800')
)
)
rD <- RSelenium::rsDriver(extraCapabilities = eCaps)
remDr <- rD[["client"]]
text <- c()
contents <- c()
remDr$navigate('https://www.wikipedia.org/')
keystosearchbox(remDr,'//*[@id="searchInput"]',species[1])
findandclick(remDr, '/html/body/div[2]/form/fieldset/button/i')
text[1] <- getElementText(remDr, 'xpath', '/html/body/div[3]/div[3]/div[4]/div')
if(length(remDr$findElements('xpath', '//*[@id="toc"]'))!=0){
contents[1] <- getElementText(remDr, 'xpath', '//*[@id="toc"]')
} else {
contents[1] <- NA
}
for(i in 2:length(species)){
Sys.sleep(2)
keystosearchbox(remDr, '//*[@id="searchInput"]', species[i])
findandclick(remDr, '//*[@id="searchButton"]')
text[i] <- getElementText(remDr, 'xpath', '/html/body/div[3]/div[3]/div[4]/div')
if(length(remDr$findElements('xpath', '//*[@id="toc"]'))!=0){
contents[i] <- getElementText(remDr, 'xpath', '//*[@id="toc"]')
} else {
contents[i] <- NA
}  }
closerD(remDr, rD)
split_contents <- stringr::str_split(string = contents, pattern = '\\n') %>%
sapply(function(x) gsub(pattern = '^[0-9][.]*[0-9]* ', replacement = '', x = x))
split_texts <- list()
i <- 1
if(!all(is.na(split_contents[[i]]))){
pattern = paste('\\n', split_contents[[i]], '\\[', sep = '', collapse = '|')
} else {
pattern = paste('\\n', c('References|External links'), '\\[', sep = '', collapse = '|')
}
pattern
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
if(any(grepl(pattern = pattern, x = text[i]))){
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
} else {
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|')) %>%
tm::stripWhitespace() %>%
as.vector()
}
if(!any(is.na(split_contents[[i]]))){
names(split_texts[[i]]) <- split_contents[[i]]
names(split_texts[[i]])[1] <- 'Introduction'
} else {
names(split_texts[[i]]) <-
c('Introduction','References','External links')[1:length(split_texts[[i]])]
}
View(split_texts)
split_texts <- list()
for(i in 1:length(text)){
if(!all(is.na(split_contents[[i]]))){
pattern = paste('\\n', split_contents[[i]], '\\[', sep = '', collapse = '|')
} else {
pattern = paste('\\n', c('References|External links'), '\\[', sep = '', collapse = '|')
}
if(any(grepl(pattern = pattern, x = text[i]))){
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
} else {
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|')) %>%
tm::stripWhitespace() %>%
as.vector()
}
if(!any(is.na(split_contents[[i]]))){
names(split_texts[[i]]) <- split_contents[[i]]
names(split_texts[[i]])[1] <- 'Introduction'
} else {
names(split_texts[[i]]) <-
c('Introduction','References','External links')[1:length(split_texts[[i]])]
}
}
split_texts <- list()
if(!all(is.na(split_contents[[i]]))){
pattern = paste('\\n', split_contents[[i]], '\\[', sep = '', collapse = '|')
} else {
pattern = paste('\\n', c('References|External links'), '\\[', sep = '', collapse = '|')
}
if(any(grepl(pattern = pattern, x = text[i]))){
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
} else {
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|')) %>%
tm::stripWhitespace() %>%
as.vector()
}
if(!all(is.na(split_contents[[i]]))){
pattern = paste('\\n', split_contents[[i]], '\\[', sep = '', collapse = '|')
} else {
pattern = paste('\\n', c('References|External links'), '\\[', sep = '', collapse = '|')
}
stringr::str_split(string = text[i],
pattern = pattern)
split_contents <- stringr::str_split(string = contents, pattern = '\\n') %>%
sapply(function(x) gsub(pattern = '^[0-9][.]*[0-9]* ', replacement = '', x = x))
split_texts <- list()
if(!all(is.na(split_contents[[i]]))){
pattern = paste('\\n', split_contents[[i]], '\\[', sep = '', collapse = '|')
} else {
pattern = paste('\\n', c('References|External links'), '\\[', sep = '', collapse = '|')
}
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
split_texts[[i]]
View(split_texts)
text[i]
split_texts <- list()
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
split_texts <- list()
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
View(split_texts)
i
i <- 1
split_texts <- list()
if(!all(is.na(split_contents[[i]]))){
pattern = paste('\\n', split_contents[[i]], '\\[', sep = '', collapse = '|')
} else {
pattern = paste('\\n', c('References|External links'), '\\[', sep = '', collapse = '|')
}
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
View(split_texts)
View(split_texts)
split_texts[[1]]
if(any(grepl(pattern = pattern, x = text[i]))){
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
} else {
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|')) %>%
tm::stripWhitespace() %>%
as.vector()
}
if(!any(is.na(split_contents[[i]]))){
names(split_texts[[i]]) <- split_contents[[i]]
names(split_texts[[i]])[1] <- 'Introduction'
} else {
names(split_texts[[i]]) <-
c('Introduction','References','External links')[1:length(split_texts[[i]])]
}
split_texts[[1]]
split_contents <- stringr::str_split(string = contents, pattern = '\\n') %>%
sapply(function(x) gsub(pattern = '^[0-9][.]*[0-9]* ', replacement = '', x = x))
split_texts <- list()
for(i in 1:length(text)){
if(!all(is.na(split_contents[[i]]))){
pattern = paste('\\n', split_contents[[i]], '\\[', sep = '', collapse = '|')
} else {
pattern = paste('\\n', c('References|External links'), '\\[', sep = '', collapse = '|')
}
if(any(grepl(pattern = pattern, x = text[i]))){
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n')) %>%
tm::stripWhitespace() %>%
as.vector()
} else {
split_texts[[i]] <- stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|')) %>%
tm::stripWhitespace() %>%
as.vector()
}
if(!any(is.na(split_contents[[i]]))){
names(split_texts[[i]]) <- split_contents[[i]]
names(split_texts[[i]])[1] <- 'Introduction'
} else {
names(split_texts[[i]]) <-
c('Introduction','References','External links')[1:length(split_texts[[i]])]
}
}
i
split_texts <- list()
if(!all(is.na(split_contents[[i]]))){
pattern = paste('\\n', split_contents[[i]], '\\[', sep = '', collapse = '|')
} else {
pattern = paste('\\n', c('References|External links'), '\\[', sep = '', collapse = '|')
}
pattern
stringr::str_split(string = text[i],
pattern = pattern) %>%
sapply(function(x) stringr::str_remove(string = x, pattern = '^edit]\\n'))
split_contents[[i]]
any(grepl(pattern = pattern, x = text[i]))
tringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|'))
stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|'))
stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|')) %>%
unlist()
stringr::str_split(string = text[i],
pattern = paste('\\n',
split_contents[[i]],
'\\n',
sep = '',
collapse = '|')) %>%
unlist() %>%
tm::stripWhitespace() %>%
as.vector()
closerD(remDr, rD)
closerD(remDr, rD)
devtools::load_all()
species_data <- cleaned_otidiformes_data
species <- species_data[['assessments']]$scientificName
texts <- wikiScrape(species)
View(texts)
exportlist(texts, '/Users/Alice/Documents/Masters', 'bustard_wiki_texts')
list <- texts
i <- 1
names <- rownames(list[[i]])
names <- names(list[[i]])
tibble <- tidyr::tibble(section = names,
text = list[[i]])
View(tibble)
internalTaxonId <- species_data[['assessments']]$internalTaxonId
scientificName <- species_data[['assessments']]$scientificName
text_tibble <- tidyr::tibble(internalTaxonId = character(),
scientificName = character(),
section = character(),
text = character())
for(i in 1:length(list)){
names <- names(list[[i]])
tibble <- tidyr::tibble(internalTaxonId = internalTaxonId[i],
scientificName = scientificName[i],
section = names,
text = list[[i]])
text_tibble <- dplyr::bind_rows(text_tibble, tibble)
}
View(text_tibble)
write.csv(text_tibble, '/Users/Alice/Documents/Masters/otidiformes_wiki_texts.csv')
devtools::document()
