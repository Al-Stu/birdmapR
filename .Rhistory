collate_list <- collate_list[code_numeric]
split_code <- list()
list_replacement <- list()
for(i in 1:length(collate_list)){
split_code[[i]] <- collate_list[[i]] %>%
dplyr::select(`code`) %>%
splittocolumns(pattern = '[.]')
names(split_code[[i]]) <- paste('code_l',c(1:ncol(split_code[[i]])),sep='')
list_replacement[[names(collate_list)[i]]] <- dplyr::bind_cols(collate_list[[i]],split_code[[i]])
}
result <- list[!grepl(x = names(list),pattern = paste(names(list_replacement),sep='|',collapse='|'))] %>%
c(list_replacement)
return(result)
}
species_data <- RL.splitcodes(species_data)
View(species_data[["assessments"]])
View(species_data)
View(species_data[["redlistCriteria"]])
RL.tidyspdata <- function(species_data){
internalTaxonId <- species_data[['assessments']]$internalTaxonId
name <- c('systems','realm','redlistCriteria')
columns <- dplyr::select(species_data[['assessments']],all_of(name))
species_data[['assessments']] <- dplyr::select(species_data[['assessments']],-all_of(name))
species_data <- c(species_data,
splittotidy(columns = columns,IDs = internalTaxonId,pattern = c('[|]','[|]',';'),name = name))
collate_list <- species_data[as.vector(sapply(species_data,nrow))==nrow(species_data[['assessments']])]
species_data <- species_data[!as.vector(sapply(species_data,nrow))==nrow(species_data[['assessments']])]
species_data[['species_data']] <- joinall(collate_list)
species_data <- RL.addtaxonid(species_data)
species_data[['common_names']]$source <- rep_len('RL',nrow(species_data[['common_names']]))
return(species_data)
}
RL.tidyspdata <- function(species_data){
internalTaxonId <- species_data[['assessments']]$internalTaxonId
name <- c('systems','realm','redlistCriteria')
columns <- dplyr::select(species_data[['assessments']],all_of(name))
species_data[['assessments']] <- dplyr::select(species_data[['assessments']],-all_of(name))
species_data <- c(species_data,
splittotidy(columns = columns,IDs = internalTaxonId,pattern = c('[|]','[|]',';'),name = name))
collate_list <- species_data[as.vector(sapply(species_data,nrow))==nrow(species_data[['assessments']])]
species_data <- species_data[!as.vector(sapply(species_data,nrow))==nrow(species_data[['assessments']])]
species_data[['species_data']] <- joinall(collate_list)
species_data <- RL.addtaxonid(species_data)
species_data[['common_names']]$source <- rep_len('RL',nrow(species_data[['common_names']]))
species_data[['synonyms']]$source <- rep_len('RL',nrow(species_data[['synonyms']]))
return(species_data)
}
redlistCriteria <- species_data[['redlistCriteria']]
to_columns <- splittocolumns(x = redlistCriteria,pattern = '[+]')
View(redlistCriteria)
View(to_columns)
to_columns <- splittocolumns(x = redlistCriteria$redlistCriteria,pattern = '[+]')
View(to_columns)
to_columns
to_columns <- redlistCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
mutate(letter = substr(redlistCriteria,1,1),
V1 = gsub('^.', '', V1))
to_columns <- redlistCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(letter = substr(redlistCriteria,1,1),
V1 = gsub('^.', '', V1))
redCriteria <- redlistCriteria
remove(redlistCriteria)
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(letter = substr(redlistCriteria,1,1),
V1 = gsub('^.', '', V1))
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(letter = substr(redCriteria$redlistCriteria,1,1),
V1 = gsub('^.', '', redCriteria$V1))
redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]')
dplyr::mutate(letter = substr(redCriteria$redlistCriteria,1,1),
V1 = gsub('^.', '', redCriteria$V1))
dplyr::mutate(redCriteria,
letter = substr(redCriteria$redlistCriteria,1,1),
V1 = gsub('^.', '', redCriteria$V1))
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(redCriteria,
letter = substr(`redlistCriteria`,1,1),
V1 = gsub('^.', '', `V1`))
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(.data = edCriteria,
letter = substr(`redlistCriteria`,1,1),
V1 = gsub('^.', '', `V1`)))
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(.data = edCriteria,
letter = substr(`redlistCriteria`,1,1),
V1 = gsub('^.', '', `V1`))
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(.data = redCriteria,
letter = substr(`redlistCriteria`,1,1),
V1 = gsub('^.', '', `V1`))
redCriteria
dplyr::mutate(redCriteria,
letter = stringr::str_extract(redlistCriteria,'^.'),
V1 = stringr::str_extract(redlistCriteria,'[0-9].*$'))
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(letter = stringr::str_extract(redlistCriteria,'^.'),
V1 = stringr::str_extract(redlistCriteria,'[0-9].*$'))
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(letter = stringr::str_extract(V1,'^.'),
V1 = stringr::str_extract(V1,'[0-9].*$'))
for(i in 1:(ncol(to_columns)-1)){
to_columns[,i] <- paste (to_columns$letter,to_columns[,i],sep='')
}
to_columns
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(letter = stringr::str_extract(V1,'^.'),
V1 = stringr::str_extract(V1,'[0-9].*$'))
for(i in 1:(ncol(to_columns)-1)){
to_columns[,i] <- paste (to_columns$letter,to_columns[,i],collapse='')
}
to_columns
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(letter = stringr::str_extract(V1,'^.'),
V1 = stringr::str_extract(V1,'[0-9].*$'))
for(i in 1:(ncol(to_columns)-1)){
to_columns[,i] <- paste(to_columns$letter,to_columns[,i],collapse='')
}
to_columns
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(letter = stringr::str_extract(V1,'^.'),
V1 = stringr::str_extract(V1,'[0-9].*$'))
paste(as.character(to_columns$letter),as.character(to_columns[,i]),collapse='')
paste(as.character(to_columns$letter),as.character(to_columns[,i]),sep='')
i
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(letter = stringr::str_extract(V1,'^.'),
V1 = stringr::str_extract(V1,'[0-9].*$'))
to_columns$letter
to_columns[,i]
paste(dplyr::select(to_columns,`letter`),to_columns[,i],sep='')
paste(dplyr::select(to_columns,`letter`),to_columns[,i],collapse='')
dplyr::select(to_columns,`letter`)
paste(to_columns$letter,as.vector(to_columns[,i]),sep='')
paste(to_columns$letter,as.vector(to_columns[,i]),collapse='')
paste(colnames(to_columns)[-1]
colnames(to_columns)[-1]
colnames(to_columns)[-1]
paste(colnames(to_columns)[i], colnames(to_columns)[ncol(to_columns)],collapse="")
tidyr::unite_(to_columns, paste(colnames(to_columns)[i], colnames(to_columns)[ncol(to_columns)],collapse=""), colnames(data)[-1])
tidyr::unite_(to_columns, paste(colnames(to_columns)[i], colnames(to_columns)[ncol(to_columns)],collapse="-"), colnames(data)[-1])
paste0(to_columns[,c(1,4)], collapse)
paste0(to_columns[,c(1,4)])
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(letter = stringr::str_extract(V1,'^.'),
V1 = stringr::str_extract(V1,'[0-9].*$'))
to_columns
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(letter = stringr::str_extract(V1,'^.'),
V1 = stringr::str_extract(V1,'[0-9].*$'))
for(i in 1:(ncol(to_columns)-1)){
for(j in 1:length(to_columns[,i])){
if(!is.na(to_columns[j,i])){
to_columns[j,i] <- paste(to_columns[j,'letter'],to_columns[j,i])
}
}
}
to_columns
to_columns <- redCriteria$redlistCriteria %>%
splittocolumns(pattern = '[+]') %>%
dplyr::mutate(letter = stringr::str_extract(V1,'^.'),
V1 = stringr::str_extract(V1,'[0-9].*$'))
for(i in 1:(ncol(to_columns)-1)){
for(j in 1:nrow(to_columns)){
if(!is.na(to_columns[j,i])){
to_columns[j,i] <- paste(to_columns[j,'letter'],to_columns[j,i],sep='',collapse='')
}
}
}
to_columns
to_columns <- to_columns[,-'letter'] %>%
dplyr::bind_cols(redCriteria$internalTaxonId)
to_columns <- to_columns[,-c('letter')] %>%
dplyr::bind_cols(redCriteria$internalTaxonId)
to_columns <- to_columns[,-ncol(to_columns)] %>%
dplyr::bind_cols(redCriteria$internalTaxonId)
to_columns[,-ncol(to_columns)]
dplyr::bind_cols(to_columns[,-ncol(to_columns)],
redCriteria$internalTaxonId)
dplyr::bind_cols(to_columns[,-ncol(to_columns)],
redCriteria[,1])
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
tidyr::pivot_longer(to_columns,-ncol(to_columns), values_to = criterion) %>%
dplyr::select(c(`internalTaxonId`, criterion))
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
tidyr::pivot_longer(to_columns,-`internalTaxonId`, values_to = criterion)
to_columns
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1])
dplyr::bind_cols(to_columns[,-ncol(to_columns)], as.character(redCriteria[,1]))
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId))
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(to_columns,-`internalTaxonId`, values_to = criterion)
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = criterion)
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion')
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`))
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`)) %>%
filter()
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`)) %>%
dplyr::filter()
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`)) %>%
sapply(function(x) dplyr::filter(x,!is.na(x)))
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`)) %>%
dplyr::filter(!is.na('criterion'))
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`))
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`)) %>%
apply(function(x) dplyr::filter(x,!is.na('criterion')))
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`)) %>%
apply(FUN=function(x) dplyr::filter(x,!is.na('criterion')))
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`)) %>%
filter(is.na(`criterion`))
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`)) %>%
dplyr::filter(is.na(`criterion`))
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`)) %>%
dplyr::filter(!is.na(`criterion`))
pastelasttoall <- function(to_columns){
for(i in 1:(ncol(to_columns)-1)){
for(j in 1:nrow(to_columns)){
if(!is.na(to_columns[j,i])){
to_columns[j,i] <- paste(to_columns[j,'letter'],to_columns[j,i],sep='',collapse='')
}
}
}
return(to_columns)
}
RL.criteriatocolumns <- function(input,pattern,first_half,second_half){
to_columns <- input %>%
splittocolumns(pattern = pattern) %>%
dplyr::mutate(letter = stringr::str_extract(V1,first_half),
V1 = stringr::str_extract(V1,second_half)) %>%
pastelasttoall()
}
to_columns <- RL.criteriatocolumns(redCriteria$redlistCriteria,'[+]','^.','[0-9].*$')
to_columns_pivot <-  dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`)) %>%
dplyr::filter(!is.na(`criterion`))
to_columns_pivot
RL.pivottocolumns <- function(redCriteria,to_columns){
dplyr::bind_cols(to_columns[,-ncol(to_columns)], redCriteria[,1]) %>%
dplyr::mutate(internalTaxonId = as.character(internalTaxonId)) %>%
tidyr::pivot_longer(-`internalTaxonId`, values_to = 'criterion') %>%
dplyr::select(c(`internalTaxonId`, `criterion`)) %>%
dplyr::filter(!is.na(`criterion`))
}
to_columns_pivot <-  RL.pivottocolumns(redCriteria,to_columns)
l2_to_columns <- RL.criteriatocolumns(to_columns_pivot,'','^..','[a-z].*$')
l2_to_columns
input = to_columns_pivot
pattern = ''
first_half = '^..'
second_half = '[a-z].*$'
input %>%
splittocolumns(pattern = pattern)
input
l2_to_columns <- RL.criteriatocolumns(input = to_columns_pivot$criterion,pattern = '',first_half = '^..',second_half = '[a-z].*$')
l2_to_columns
input = to_columns_pivot$criterion
input %>%
splittocolumns(pattern = pattern)
input %>%
splittocolumns(pattern = pattern) %>%
tidyr::unite(`V1`,`V2`,sep='')
input %>%
splittocolumns(pattern = pattern) %>%
tidyr::unite_(`V1`,`V2`,sep='')
input %>%
splittocolumns(pattern = pattern) %>%
tidyr::unite(col='letter',`V1`,`V2`,sep='')
pastelasttoall <- function(to_columns){
for(i in 1:(ncol(to_columns)-1)){
for(j in 1:nrow(to_columns)){
if(!is.na(to_columns[j,i])){
to_columns[j,i] <- paste(to_columns[j,ncol(to_columns)],to_columns[j,i],sep='',collapse='')
}
}
}
return(to_columns)
}
pastefirstttoall <- function(to_columns){
for(i in 2:(ncol(to_columns))){
for(j in 1:nrow(to_columns)){
if(!is.na(to_columns[j,i])){
to_columns[j,i] <- paste(to_columns[j,1],to_columns[j,i],sep='',collapse='')
}
}
}
return(to_columns)
}
input %>%
splittocolumns(pattern = pattern) %>%
tidyr::unite(col='letter',`V1`,`V2`,sep='') %>%
pastefirsttoall()
pastefirstttoall <- function(to_columns){
for(i in 2:(ncol(to_columns))){
for(j in 1:nrow(to_columns)){
if(!is.na(to_columns[j,i])){
to_columns[j,i] <- paste(to_columns[j,1],to_columns[j,i],sep='',collapse='')
}
}
}
return(to_columns)
}
pastefirsttoall <- function(to_columns){
for(i in 2:(ncol(to_columns))){
for(j in 1:nrow(to_columns)){
if(!is.na(to_columns[j,i])){
to_columns[j,i] <- paste(to_columns[j,1],to_columns[j,i],sep='',collapse='')
}
}
}
return(to_columns)
}
input %>%
splittocolumns(pattern = pattern) %>%
tidyr::unite(col='letter',`V1`,`V2`,sep='') %>%
pastefirsttoall()
RL.criteriatocolumnsl2 <- function(input,pattern){
to_columns <- input %>%
splittocolumns(pattern = pattern) %>%
tidyr::unite(col='letter',`V1`,`V2`,sep='') %>%
pastefirsttoall()
}
l2_to_columns <- RL.criteriatocolumnsl2(input = to_columns_pivot$criterion,pattern = '',first_half = '^..',second_half = '[a-z].*$')
l2_to_columns <- RL.criteriatocolumnsl2(input = to_columns_pivot$criterion,pattern = '')
l2_to_columns
RL.criteriatocolumnsl2 <- function(input,pattern){
to_columns <- input %>%
splittocolumns(pattern = pattern) %>%
tidyr::unite(col='letter',`V1`,`V2`,sep='') %>%
pastefirsttoall()
return(to_columns[,-1])
}
l2_to_columns <- RL.criteriatocolumnsl2(input = to_columns_pivot$criterion,pattern = '')
l2_to_columns
to_columns_pivot
l2_to_columns
l2_to_columns_pivot <-  RL.pivottocolumns(redCriteria,l2_to_columns)
l2_to_columns_pivot <-  RL.pivottocolumns(to_columns_pivot,l2_to_columns)
l2_to_columns_pivot
l3_to_columns <- splittocolumns(l2_to_columns_pivot,pattern = 'pattern')
l3_to_columns
l3_to_columns <- splittocolumns(l2_to_columns_pivot$criterion,pattern = 'pattern')
l3_to_columns
l3_to_columns <- splittocolumns(l2_to_columns_pivot$criterion,pattern = '')
l3_to_columns
l3_to_columns <- splittocolumns(l2_to_columns_pivot$criterion,pattern = '') %>%
dplyr::bind_cols(l2_to_columns_pivot[,1])
l3_to_columns
splittocolumns(l2_to_columns_pivot$criterion,pattern = '') %>%
dplyr::bind_cols(l2_to_columns_pivot[,1]) %>%
dplyr::select(`internalTaxonId`,everything())
splittocolumns(l2_to_columns_pivot$criterion,pattern = '') %>%
dplyr::bind_cols(l2_to_columns_pivot[,1]) %>%
dplyr::select(`internalTaxonId`,everything()) %>%
dplyr::rename(level1=`V1`,
level2=`V2`,
level3=`V3`)
RL.criteriaclean <- function(redCriteria){
to_columns <- RL.criteriatocolumns(redCriteria$redlistCriteria,'[+]','^.','[0-9].*$')
to_columns_pivot <-  RL.pivottocolumns(redCriteria,to_columns)
l2_to_columns <- RL.criteriatocolumnsl2(input = to_columns_pivot$criterion,pattern = '')
l2_to_columns_pivot <-  RL.pivottocolumns(to_columns_pivot,l2_to_columns)
l3_to_columns <- splittocolumns(l2_to_columns_pivot$criterion,pattern = '') %>%
dplyr::bind_cols(l2_to_columns_pivot[,1]) %>%
dplyr::select(`internalTaxonId`,everything()) %>%
dplyr::rename(level1=`V1`,
level2=`V2`,
level3=`V3`)
}
View(redCriteria)
to_columns <- RL.criteriatocolumns(redCriteria$redlistCriteria,'[+]','^.','[0-9].*$')
to_columns_pivot <-  RL.pivottocolumns(redCriteria,to_columns)
l2_to_columns <- RL.criteriatocolumnsl2(input = to_columns_pivot$criterion,pattern = '')
l2_to_columns_pivot <-  RL.pivottocolumns(to_columns_pivot,l2_to_columns)
splittocolumns(l2_to_columns_pivot$criterion,pattern = '') %>%
dplyr::bind_cols(l2_to_columns_pivot[,1])
splittocolumns(l2_to_columns_pivot$criterion,pattern = '') %>%
dplyr::bind_cols(l2_to_columns_pivot[,1]) %>%
dplyr::right_join(redCriteria[,c(1,2)])
as.character(redCriteria[,1])
redCriteria[,1] <- as.character(redCriteria[,1])
splittocolumns(l2_to_columns_pivot$criterion,pattern = '') %>%
dplyr::bind_cols(l2_to_columns_pivot[,1]) %>%
dplyr::right_join(redCriteria[,c(1,2)])
redCriteria
redCriteria <- species_data[['redlistCriteria']]
as.character(redCriteria$internalTaxonId)
redCriteria$internalTaxonId <- as.character(redCriteria$internalTaxonId)
redCriteria
splittocolumns(l2_to_columns_pivot$criterion,pattern = '') %>%
dplyr::bind_cols(l2_to_columns_pivot[,1]) %>%
dplyr::right_join(redCriteria[,c(1,2)])
splittocolumns(l2_to_columns_pivot$criterion,pattern = '') %>%
dplyr::bind_cols(l2_to_columns_pivot[,1]) %>%
dplyr::right_join(redCriteria[,c(1,2)]) %>%
dplyr::select(`internalTaxonId`,`scientificName`, everything())
RL.criteriaclean <- function(redCriteria){
redCriteria$internalTaxonId <- as.character(redCriteria$internalTaxonId)
to_columns <- RL.criteriatocolumns(redCriteria$redlistCriteria,'[+]','^.','[0-9].*$')
to_columns_pivot <-  RL.pivottocolumns(redCriteria,to_columns)
l2_to_columns <- RL.criteriatocolumnsl2(input = to_columns_pivot$criterion,pattern = '')
l2_to_columns_pivot <-  RL.pivottocolumns(to_columns_pivot,l2_to_columns)
l3_to_columns <- splittocolumns(l2_to_columns_pivot$criterion,pattern = '') %>%
dplyr::bind_cols(l2_to_columns_pivot[,1]) %>%
dplyr::right_join(redCriteria[,c(1,2)]) %>%
dplyr::select(`internalTaxonId`,`scientificName`, everything()) %>%
dplyr::rename(level1=`V1`,
level2=`V2`,
level3=`V3`)
}
RL.tidyspdata <- function(species_data){
internalTaxonId <- species_data[['assessments']]$internalTaxonId
name <- c('systems','realm','redlistCriteria')
columns <- dplyr::select(species_data[['assessments']],all_of(name))
species_data[['assessments']] <- dplyr::select(species_data[['assessments']],-all_of(name))
species_data <- c(species_data,
splittotidy(columns = columns,IDs = internalTaxonId,pattern = c('[|]','[|]',';'),name = name))
collate_list <- species_data[as.vector(sapply(species_data,nrow))==nrow(species_data[['assessments']])]
species_data <- species_data[!as.vector(sapply(species_data,nrow))==nrow(species_data[['assessments']])]
species_data[['species_data']] <- joinall(collate_list)
species_data <- RL.addtaxonid(species_data)
species_data[['common_names']]$source <- rep_len('RL',nrow(species_data[['common_names']]))
species_data[['synonyms']]$source <- rep_len('RL',nrow(species_data[['synonyms']]))
species_data[['redlistCriteria']] <- RL.criteriaclean(species_data[['redlistCriteria']])
return(species_data)
}
species_data <- otidiformes_data_raw
species_data_tidied <- species_data %>%
RL.tidyspdata() %>%
RL.splitcodes()
View(species_data)
View(species_data[["redlistCriteria"]])
View(species_data_tidied)
View(species_data_tidied[["redlistCriteria"]])
RL.criteriaclean <- function(redCriteria){
redCriteria$internalTaxonId <- as.character(redCriteria$internalTaxonId)
to_columns <- RL.criteriatocolumns(redCriteria$redlistCriteria,'[+]','^.','[0-9].*$')
to_columns_pivot <-  RL.pivottocolumns(redCriteria,to_columns)
l2_to_columns <- RL.criteriatocolumnsl2(input = to_columns_pivot$criterion,pattern = '')
l2_to_columns_pivot <-  RL.pivottocolumns(to_columns_pivot,l2_to_columns)
l3_to_columns <- splittocolumns(l2_to_columns_pivot$criterion,pattern = '') %>%
dplyr::bind_cols(l2_to_columns_pivot[,1]) %>%
dplyr::right_join(redCriteria[,c(1,2)]) %>%
dplyr::select(`internalTaxonId`,`scientificName`, everything()) %>%
dplyr::rename(level1=`V1`,
level2=`V2`,
level3=`V3`) %>%
dplyr::filter(!is.na(`level1`))
return(l3_to_columns)
}
species_data_tidied <- species_data %>%
RL.tidyspdata() %>%
RL.splitcodes()
View(species_data_tidied)
View(species_data_tidied[["redlistCriteria"]])
View(species_data_tidied[["synonyms"]])
